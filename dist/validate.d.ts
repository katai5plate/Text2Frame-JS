import { ArgValue, Color3, Color4, DirectOrVariables, FromTo, MapPosition, Sound, SwitchId, Text, VariableId } from "./type";
export declare const joinSkip: (delim: string | null, arr: (Text | undefined)[]) => string;
export declare const tag: (name: string, arg?: (Text | undefined)[], textChildren?: string) => string;
export declare const typeCase: (v: ArgValue, cases: Partial<{
    number: (v: number, e: () => Error) => number | string;
    string: (v: string, e: () => Error) => string;
    object: (v: object, e: () => Error) => string;
    variableId: (v: VariableId, e: () => Error) => string;
    switchId: (v: SwitchId, e: () => Error) => string;
    fromTo: (v: FromTo, e: () => Error) => string;
    mapPosition: (v: MapPosition, e: () => Error) => string;
    sound: (v: Sound, e: () => Error) => string;
    color: (v: Color3 | Color4, e: () => Error) => string;
}>) => string | number;
export declare const argInt: (v: number) => number;
export declare const argRange: (v: number, range: FromTo) => number;
export declare const argId: (v: number) => number;
export declare const argEnemyIndex: (v: number) => number;
export declare const argPreset: <P extends Record<string, string>>(v: string, preset: P) => string;
export declare const argSwitchId: (value: SwitchId) => string;
export declare const argVariableId: (value: VariableId) => string;
export declare const argFromTo: (value: FromTo) => string;
export declare const argsColor: (color: Color3 | Color4) => string;
export declare const argsSound: (sound: Sound) => string;
export declare const argMapPosition: (mapos: MapPosition, mode: DirectOrVariables) => string;
export declare const argColorTone: <P extends Record<string, string>>(value: Color4 | keyof P) => string;
export declare const argIntOrVariableId: (v: number | VariableId) => string | number;
export declare const createPresetArg: <P extends Record<string, string>>(preset: P) => (v: ArgValue) => string | number;
export declare const createPresetArgWithVariableId: <P extends Record<string, string>>(preset: P, range?: FromTo) => (v: ArgValue) => string | number;
//# sourceMappingURL=validate.d.ts.map